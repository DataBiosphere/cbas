openapi: 3.0.3
info:
  title: Terra Batch Analysis
  description: Manage batch analyses, run configurations, and run sets in userspace
  version: 0.0.1
servers:
  - url: ./
    description: Relative to the current swagger page
paths:
  /status:
    get:
      summary: Check status of the service
      tags: [ public ]
      operationId: getStatus
      security: [ ]
      responses:
        '200':
          $ref: '#/components/responses/SystemStatusResponse'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/SystemStatusResponse'
  "/api/batch/v1/runs":
    get:
      tags: [ runs ]
      summary: Get list of all runs
      operationId: getRuns
      responses:
        '200':
          $ref: '#/components/responses/GetRunResponse'
        '400':
          $ref: '#/components/responses/UserError'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/batch/v1/run_sets:
    post:
      tags: [ run_sets ]
      summary: Combine an inputs definition with WDS records to run a series of workflows
      operationId: postRunSet
      requestBody:
        $ref: '#/components/requestBodies/PostRunSetRequest'
      responses:
        '200':
          $ref: '#/components/responses/PostRunSetResponse'
        '201':
          $ref: '#/components/responses/PostRunSetResponse'
        '400':
          $ref: '#/components/responses/UserError'
        '500':
          $ref: '#/components/responses/ServerError'
    get:
      tags: [ run_sets ]
      summary: Get list of all run sets
      operationId: getRunSets
      responses:
        '200':
          $ref: '#/components/responses/GetRunSetListResponse'
        '400':
          $ref: '#/components/responses/UserError'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/batch/v1/methods:
    get:
      summary: Lists known methods
      tags: [ batch ]
      operationId: listMethods
      responses:
        '200':
          description: A JSON array of methods
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '500':
          $ref: '#/components/responses/ServerError'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  requestBodies:
    PostRunSetRequest:
      description: Request body to run a set of workflows (by URL) with WDS inputs.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RunSetRequest'

  responses:
    PostRunSetResponse:
      description: Response from creating a new run set
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RunSetStateResponse'
    GetRunResponse:
      description: Details about runs
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RunLogResponse'
    GetRunSetListResponse:
      description: Details about run sets
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RunSetListResponse'
    SystemStatusResponse:
      description: A JSON description of the subsystems and their statuses.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SystemStatus'
    UserError:
      description: User error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    NotFound:
      description: Not found (or unauthorized)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'

  schemas:
    RunSetRequest:
      type: object
      properties:
        workflow_url:
          type: string
          description: URL to the workflow script to run
          example: 'https://www.example.com/example.wdl'
        workflow_input_definitions:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowInputDefinition'
          description: Declarative input definition for combination with WDS records.
        wds_records:
          $ref: '#/components/schemas/WdsRecordSet'
        workflow_output_definitions:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowOutputDefinition'
          description: Declarative output definition for writing back to WDS.

    WdsRecordSet:
      type: object
      properties:
        record_type:
          type: string
          example: FOO
        record_ids:
          type: array
          items:
            type: string
          example:
            - F0011111-1111-1111-1111-111111111111
      description: The set of WDS records to use when constructing the inputs.

    WorkflowInputDefinition:
      type: object
      properties:
        input_name:
          type: string
          example: workflow_input_foo_rating
        input_type:
          $ref: '#/components/schemas/ParameterTypeDefinition'
        source:
          $ref: '#/components/schemas/ParameterDefinition'

    WorkflowOutputDefinition:
      type: object
      properties:
        output_name:
          type: string
          example: workflow_output_foo_rating
        output_type:
          $ref: '#/components/schemas/ParameterTypeDefinition'
        record_attribute:
          type: string
          description: The attribute name on the record to use.
          required: true
          example: record_field_foo_rating

    ParameterTypeDefinition:
      title: ParameterTypeDefinition
      properties:
        # Note: In quotes to remind us that this "type" is an API field, not an OpenAPI spec 'type':
        "type":
          type: string
          description: Indicates what type of parameter type definition this is.
          required: true
          enum: [ primitive, optional, array ]
          example: record_lookup
      oneOf:
        - $ref: '#/components/schemas/ParameterTypeDefinitionPrimitive'
        - $ref: '#/components/schemas/ParameterTypeDefinitionOptional'
        - $ref: '#/components/schemas/ParameterTypeDefinitionArray'
      discriminator:
        propertyName: "type"
        mapping:
          primitive: 'ParameterTypeDefinitionPrimitive'
          optional: 'ParameterTypeDefinitionOptional'
          array: 'ParameterTypeDefinitionArray'

    PrimitiveParameterValueType:
      title: PrimitiveParameterValueType
      example: String
      description: What type of value this parameter expects
      enum:
        - String
        - Int
        - Boolean
        - Float
        - File
      type: string

    ParameterTypeDefinitionPrimitive:
      type: object
      allOf:
        - $ref: '#/components/schemas/ParameterTypeDefinition'
      properties:
        primitive_type:
          $ref: '#/components/schemas/PrimitiveParameterValueType'

    ParameterTypeDefinitionOptional:
      type: object
      allOf:
        - $ref: '#/components/schemas/ParameterTypeDefinition'
      properties:
        optional_type:
          $ref: ParameterTypeDefinition

    ParameterTypeDefinitionArray:
      type: object
      allOf:
        - $ref: '#/components/schemas/ParameterTypeDefinition'
      properties:
        non_empty:
          type: boolean
          default: false
        array_type:
          $ref: ParameterTypeDefinition

    # This ParameterDefinition holds the 'oneOf' declaration for all the various types that can
    # be used as parameter definitions.
    # In addition, in Java it acts as the superclass for the various
    # ParameterDefinitionXYZ classes below. Because the codegen is imperfect, we have to explicitly
    # add 'allOf: ParameterDefinition' declarations to those classes to force the codegen to make
    # them subclasses... but in terms of how the swagger UI works, they seem to make no difference
    ParameterDefinition:
      title: ParameterDefinition
      properties:
        # Note: In quotes to remind us that this "type" is an API field, not an OpenAPI spec 'type':
        "type":
          type: string
          description: Indicates what type of parameter declaration this is.
          required: true
          enum: [ literal, record_lookup ]
          example: record_lookup
      oneOf:
        - $ref: '#/components/schemas/ParameterDefinitionRecordLookup'
        - $ref: '#/components/schemas/ParameterDefinitionLiteralValue'
      discriminator:
        propertyName: "type"
        mapping:
          literal: 'ParameterDefinitionLiteralValue'
          record_lookup: 'ParameterDefinitionRecordLookup'

    ParameterDefinitionLiteralValue:
      type: object
      allOf:
        - $ref: '#/components/schemas/ParameterDefinition'
      properties:
        parameter_value:
          description: The literal value to use. Can be any type, but must match the declared input_type or output_type.
          required: True
          example: hello world
    ParameterDefinitionRecordLookup:
      type: object
      allOf:
        - $ref: '#/components/schemas/ParameterDefinition'
      properties:
        record_attribute:
          type: string
          description: The attribute name on the record to use.
          required: true
          example: record_field_foo_rating
    RunSetStateResponse:
      type: object
      required: [run_set_id]
      properties:
        run_set_id:
          type:
            string
          example: 00000000-0000-0000-0000-000000000000
        runs:
          type: array
          items:
            $ref: '#/components/schemas/RunStateResponse'
        state:
          $ref: '#/components/schemas/RunSetState'
        errors:
          type:
            string
    RunLog:
      type: object
      properties:
        run_id:
          type: string
        engine_id:
          type: string
          description: Identifier of the run in the execution engine
        workflow_url:
          type: string
          description: URL to the workflow script to run
        name:
          type: string
        state:
          $ref: '#/components/schemas/RunState'
        workflow_params:
          type: string
        submission_date:
          type: string
          format: date-time
        last_modified_timestamp:
          type: string
          format: date-time
        error_messages:
          type: string
          required: false
    RunLogResponse:
      type: object
      properties:
        runs:
          type: array
          items:
            $ref: '#/components/schemas/RunLog'
    RunStateResponse:
      type: object
      required: [run_id]
      properties:
        run_id:
          type:
            string
          example: 00000000-0000-0000-0000-000000000000
        state:
          $ref: '#/components/schemas/RunState'
        errors:
          type:
            string
    RunSetListResponse:
      type: object
      properties:
        run_sets:
          type: array
          items:
            $ref: '#/components/schemas/RunSetDetailsResponse'
    RunSetDetailsResponse:
      type: object
      properties:
        run_set_id:
          type: string
        state:
          $ref: '#/components/schemas/RunSetState'
        record_type:
          type: string
        submission_timestamp:
          type: string
          format: date-time
        last_modified_timestamp:
          type: string
          format: date-time
        runs_count:
          type: integer
        error_count:
          type: integer
    ErrorReport:
      type: object
      required: [ message, status_code, causes]
      properties:
        message:
          type: string
        status_code:
          type: integer
        causes:
          type: array
          items:
            type: string
    SystemStatus:
      required: [ ok, systems ]
      type: object
      properties:
        ok:
          type: boolean
          description: whether any system(s) need attention
        systems:
          type: object
          additionalProperties:
            type: object
            properties:
              ok:
                type: boolean
              messages:
                type: array
                items:
                  type: string
    RunState:
      title: RunState
      example: QUEUED
      enum:
        - UNKNOWN
        - QUEUED
        - INITIALIZING
        - RUNNING
        - PAUSED
        - COMPLETE
        - EXECUTOR_ERROR
        - SYSTEM_ERROR
        - CANCELED
        - CANCELING
      type: string
    RunSetState:
      title: RunSetState
      example: RUNNING
      enum:
        - SET_UNKNOWN_STATE
        - SET_RUNNING
        - SET_COMPLETE
        - SET_ERROR
      type: string
