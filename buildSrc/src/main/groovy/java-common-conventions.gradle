plugins {
    id 'idea'
    id 'jacoco'
    id 'java'

    id 'com.diffplug.spotless'
    id 'com.github.spotbugs'
    id 'org.hidetake.swagger.generator'
}

boolean isCiServer = System.getenv().containsKey("CI")

if (!isCiServer) {
    tasks.withType(JavaExec).configureEach {
        systemProperty 'spring.profiles.include', 'human-readable-logging'
    }
    tasks.withType(Test).configureEach {
        systemProperty 'spring.profiles.include', 'human-readable-logging'
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    maven {
        // Terra proxy for maven central
        url 'https://broadinstitute.jfrog.io/broadinstitute/maven-central/'
    }
    mavenCentral()
    maven {
        url 'https://broadinstitute.jfrog.io/broadinstitute/libs-release/'
    }
    maven {
        url 'https://broadinstitute.jfrog.io/broadinstitute/libs-snapshot-local/'
    }
}

dependencies {
    compileOnly "com.google.code.findbugs:annotations:3.0.1"
    implementation 'io.swagger.core.v3:swagger-annotations:2.1.12'
    swaggerCodegen 'io.swagger.codegen.v3:swagger-codegen-cli:3.0.31'

    implementation 'org.slf4j:slf4j-api:1.7.35'

    testImplementation 'ch.qos.logback:logback-classic:1.2.10'
    testImplementation 'org.hamcrest:hamcrest:2.2'

    implementation 'bio.terra:terra-common-lib:0.0.53-SNAPSHOT'
}

tasks.named('test') {
    useJUnitPlatform()
}

import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

// This helpful logging output courtesy of:
// https://stackoverflow.com/questions/3963708/gradle-how-to-display-test-results-in-the-console-in-real-time
// Without this, test runs are ominously quiet...
tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
            TestLogEvent.PASSED,
            TestLogEvent.SKIPPED,
            TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_ERROR,
                TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

version = gradle.releaseVersion
group = 'bio.terra'

spotless {
    java {
        targetExclude "${buildDir}/**"
        targetExclude "**/swagger-code/**"
        googleJavaFormat()
    }
}

// Run spotless check when running in github actions, otherwise run spotless apply.
compileJava {
    if (isCiServer) {
        dependsOn(spotlessCheck)
    } else {
        dependsOn(spotlessApply)
    }
}

// Spotbugs configuration
spotbugs {
    reportLevel = 'high'
    effort = 'max'
}
spotbugsMain {
    reports {
        sarif {
            enabled = true
        }
    }
}

jacocoTestReport {
    reports {
        // sonarqube requires XML coverage output to upload coverage data
        xml.required = true
    }
}
